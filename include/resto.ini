;;;;;;;;;;;;;;;;;;;;;;;
; General configuration
;;;;;;;;;;;;;;;;;;;;;;;

[general]

; Root url for the application - do not specify protocol
restoUrl = //localhost/resto2

; RESTo supported languages
; All supported languages must be associated with a dictionary class
; called RestoDictionary_{language} (usually located under $RESTO_BUILD/include/resto/Dictionaries) 
languages[] = en
languages[] = fr

; Default theme directory name for HTML display
; Theme directory must be located under $RESTO_BUILD/themes
theme = default

; Debug mode
debug = true

; Timezone
timezone = Europe/Paris

; Store user queries
storeQuery = true

; Shared links validity duration (in seconds)
; Default is 1 day (i.e. 86400 seconds)
sharedLinksDuration = 86400

;;;;;;;;;;;;;;;;;;;;;;;;;
; Database configuration
;;;;;;;;;;;;;;;;;;;;;;;;;
[database]

; Driver name must be associated to a RestoDatabaseDriver class called
; RestoDatabaseDriver_{driver} (usually located under $RESTO_BUILD/include/resto/Drivers)
driver = PostgreSQL

; Cache directory used to store Database queries
; Must be readable and writable for Webserver user
; If not set, then no cache is used
;dircache = /tmp 

; Database name
dbname = resto2

; Database host - if not specified connect through socket instead of TCP/IP
;host = localhost

; Database port
;port = 5432

; Pagination
; Default number of search results returned by page if not specified in the request
;resultsPerPage = 50

; Database user with READ+WRITE privileges (see http://github.com/jjrom/resto/README.md)
;user = resto
;password = resto

;;;;;;;;;;;;;;;;;;;;;;;;;
; Authentication
;;;;;;;;;;;;;;;;;;;;;;;;;
[authentication]

; Activation email
; This is the email adress displayed when activation code is sent to user
; If not set, it will be automatically built as 'restobot@hostname'
; activationEmail = restobot@localhost

;;;;;;;;;;;;;;;;;;;;;;;
; Modules configuration
;;;;;;;;;;;;;;;;;;;;;;;
[modules]

; OAuth authentication module
OAuth.activate = true
OAuth.route = api/oauth/callback
OAuth.options.providers.google.issuer_id = accounts.google.com
OAuth.options.providers.google.clientId = ===> Replace with your client Id <===
OAuth.options.providers.google.clientSecret = ===> Replace with your client secret <===
OAuth.options.providers.google.authorizeUrl = https://accounts.google.com/o/oauth2/auth?response_type=code&scope=openid%20email%20profile
OAuth.options.providers.google.accessTokenUrl = https://accounts.google.com/o/oauth2/token
OAuth.options.providers.google.userInfoUrl = https://www.googleapis.com/plus/v1/people/me/openIdConnect
OAuth.options.providers.google.uidKey = email
OAuth.options.providers.google.useBearer = false

; Query Analyzer module - convert natural language query to EO query
QueryAnalyzer.activate = true
QueryAnalyzer.route = api/query/analyze

; Gazetteer module - enable location based search
; Note : set database options if gazetteer is not installed in RESTo database
Gazetteer.activate = true
Gazetteer.route = api/gazetteer/search
Gazetteer.options.database.dbname = itag
Gazetteer.options.database.schema = gazetteer
;Gazetteer.options.database.host = localhost
;Gazetteer.options.database.port = 5432
Gazetteer.options.database.user = itag
Gazetteer.options.database.password = itag

; Wikipedia module - enable location based wikipedia entries display
Wikipedia.activate = true
Wikipedia.route = api/wikipedia/search
Wikipedia.options.database.dbname = itag
Wikipedia.options.database.schema = gazetteer
;Wikipedia.options.database.host = localhost
;Wikipedia.options.database.port = 5432
Wikipedia.options.database.user = itag
Wikipedia.options.database.password = itag

; iTag module - automatically tag posted feature 
iTag.activate = true
iTag.options.database.dbname = itag
iTag.options.database.user = itag
iTag.options.database.password = itag
